###############################################################################
# System Log Tags
###############################################################################
system_log_category.app_assignment=Application Assignment
system_log_category.app_access=Application Access
system_log_category.ad_agent=Active Directory Agent
system_log_category.ldap_agent=LDAP Agent
system_log_category.user_creation=User Creation
system_log_category.user_activation=User Activation
system_log_category.user_deactivation=User Deactivation
system_log_category.user_locked_out=User Locked Out
system_log_category.signin_failure=Sign-in Failure
system_log_category.signin_success=Sign-in Success
system_log_category.suspicious_activity=Suspicious Activity
system_log_category.app_import_summary=Application Imports (Summary)
system_log_category.app_import_details=Application Imports (Detailed)
system_log_category.sms_messages=SMS Messages
system_log_category.universal_directory=Universal Directory
system_log_category.token_lifecycle=Token Lifecycle
system_log_category.directory_agent_action=Directory Agent Actions
system_log_category.policy_lifecycle=Policy Lifecycle
system_log_category.user_self_service_unlock=Self Service Unlock
system_log_category.user_profile_update=User Profile Update

#
# User Activity Report
#

user_activity.core.user_auth.login_success=Sign-in
user_activity.core.user_auth.logout_success=Sign-out
user_activity.core.user_auth.session_expired=SessionExpired
user_activity.app.auth.sso=SingleSignOn
user_activity.clickstream.request.complete=RequestComplete

###############################################################################
# Core - User
###############################################################################

core.user_auth.login_failed.invalid_credentials=Sign-in Failed - Invalid Credentials
core.user_auth.login_failed.locked_out=Sign-in Failed - User is currently locked out
core.user_auth.login_failed.unknown_user=Sign-in Failed - Unknown User '${okta_username}'
core.user_auth.login_failed.not_activated=Sign-in Failed - User not activated
core.user_auth.login_failed.pending_activation=Sign-in Failed - User pending activation
core.user_auth.login_failed.not_verified=Sign-in Failed - Not Verified
core.user_auth.login_failed.service_not_available=Sign-in Failed - Service not available
core.user_auth.login_failed.general_nonsuccess=Sign-in Failed
core.user_auth.login_failed.temp_login=Sign-in Failed - Temp login
core.user_auth.login_failed.additional_credentials_required=Sign-in Failed - Additional credentials required
core.user_auth.login_failed.del_auth_timeout=Sign-in Failed - AD authentication connection failed
core.user_auth.login_failed.del_auth_no_connected_agents =Sign-in Failed - No connected agents found

core.user_auth.login_failed.sso_authentication_failure=Sign-in Failed - SSO authentication failed
core.user_auth.login_failed.inactive_org=Sign-in Failed - Org is inactive
core.user_auth.login_failed.password_based_login_disallowed=Sign-in Failed - Password based login not allowed
core.user_auth.login_failed.password_expired=Sign-In Failed - Password has expired
core.user_auth.login_failed.not_specified=Sign-in Failed - Not Specified
core.user_auth.login_failed.sunone_password_expired=Sign-In Failed - Password has expired
core.user_auth.login_failed.verification_error=Sign-In Failed - Verification failed for user: ${okta_username}

core.user_auth.login_denied=Sign-In Denied - Login is not allowed for the user.

core.user_auth.account_auto_unlocked=Account automatically unlocked
core.user_auth.account_locked=Account Locked - Max sign-in attempts exceeded.
core.user_auth.mfa_bypass_attempted=A bypass of MFA may have been attempted for this user

core.user_auth.unknown_account_self_service_unlock_attempted=Self service account unlock attempted by unknown user
core.user_auth.account_self_service_unlocked=Account unlocked using self-service
core.user_auth.account_self_service_unlock_failed=Self-service account unlock failed

core.user_auth.login_success=Sign-in successful
core.user_auth.logout_success=Sign-out successful
core.user_auth.session_expired=Session has expired
core.user_auth.account_not_found=Account was not found

core.user_auth.radius.login.succeeded=Login from Radius Agent succeeded. \
  Client address: ${client_address} \
  Client ID: ${client_id}
core.user_auth.radius.login.failed=Login from Radius Agent failed. \
  Client address: ${client_address} \
  Client ID: ${client_id}

cvd.user_profile_bootstrapped=User profile bootstrapped (Profile: ${profile_id})
cvd.user_profile_updated=User profile updated (\
  Profile: ${profile_id}, \
  Attributes Added: [${profile_properties_added}], \
  Attributes Deleted: [${profile_properties_deleted}])
cvd.appuser_profile_bootstrapped=Application User profile bootstrapped (Profile: ${profile_id})
cvd.appuser_profile_updated=Application User profile updated (\
  Profile: ${profile_id}, \
  Attributes Added: [${profile_properties_added}], \
  Attributes Deleted: [${profile_properties_deleted}])

core.user.config.password_update.success=User updated their Okta password
core.user.config.password_update.failure=User failed to update their okta password. ${reason}
core.user.config.user_activated=Okta user has been activated
core.user.config.user_deactivated=Okta user has been deactivated
core.user.config.user_status.password_reset=Admin has reset user's password
core.user.config.user_creation.success=Okta user created
core.user.config.user_creation.failure=Okta user creation failed for ${login} ${validation_errors}
core.user.config.user_reactivation.success=Okta User reinstated from deactivated status
core.user.config.profile_update.success=Okta User profile updated

#
# Auth factors
#
core.user.factor.activate = User set up ${factor} factor
core.user.factor.deactivate = User reset ${factor} factor
core.user.factor.update = User updated ${factor} factor
core.user.factor.reset_all = All additional factors reset for user
core.user.factor.attempt_fail = Failed ${factor} factor attempt
core.user.factor.attempt_success = Successful ${factor} factor attempt

#
# SMS
#
core.user.sms.message_sent.factor=SMS sent for second factor
core.user.sms.message_sent.verify=SMS sent to verify user's phone number
core.user.sms.message_sent.forgotpw=SMS sent to initiate forgot password
core.user.sms.message_sent.self_service_unlock=SMS sent to initiate self-service unlock

#
# Email
#
core.user.email.message_sent.self_service_unlock=Email sent to initiate self-service unlock

#
# Impersonation
#
core.user.impersonation.session.initiated=Impersonation session initiated
core.user.impersonation.session.ended=Impersonation session ended
core.user.impersonation.grant.enabled=Impersonation grant enabled
core.user.impersonation.grant.extended=Impersonation grant extended
core.user.impersonation.grant.revoked=Impersonation grant revoked

#
# Administrative privileges
#
core.user.admin_privilege.granted=${privilege_granted} privileges granted
core.user.admin_privilege.revoked=Revoked all administrator privileges

###############################################################################
# Core - Groups
###############################################################################

core.user_group_member.user_add=User added to group ${group_name}
core.user_group_member.user_remove=User removed from group ${group_name}

core.org.config.org_creation.success=Org created

###############################################################################
# App
###############################################################################

#
# Provisioning
#

app.user_management.push_password_update=Pushing User's password to app
app.user_management.push_profile_update=Pushing User's Profile to app
app.user_management.push_profile_success=Successfully pushed User's Profile to App
app.user_management.push_profile_failure=Failed to push User's Profile to App
app.user_management.push_new_user=Pushing new user account to app
app.user_management.provision_user=Synchronizing user with app
app.user_management.push_pending_user=Pushing new pending user account to app
app.user_management.activate_user=Activating new user account in app
app.user_management.importing_profile=Importing profile for user from app
app.user_management.importing_profile_failed.email_length=Skip importing profile for user from app due to email address too long: ${app_error_code}
app.user_management.import.csv.line.error=Error reading line from CSV: ${app_error_code}
app.user_management.import.csv.header.error=CSV Header does not match template: ${app_error_code}
app.user_management.import.csv.parse.error=Unable to parse CSV file
app.user_management.verified_user_with_thirdparty=Verified user exists in app
app.user_management.provision_user_failed=Could not synchronize user with app
app.user_management.updating_api_credentials_for_password_change=API user has changed their password, updating API credentials to match
app.user_management.deactivate_user=User deactivation was pushed to app
app.user_management.reactivate_user=User was reactivated in app
app.user_management.provision_user.user_inactive=Could not reactivate user in app
app.user_management.deactivate_user.api_account=Could not deactivate user. This user is the API user
app.user_management.update_from_master_failed=Could not apply import: ${message}
app.user_management.app_group_member_import.insert_success=Imported new member of the ${app_group_name} app group - ${app_username}
app.user_management.app_group_member_import.delete_success=Deleted member of the ${app_group_name} app group - ${app_username}
app.user_management.user_group_import.upsert_success=Imported the ${user_group_name} group from app
app.user_management.user_group_import.delete_success=Deleted the ${user_group_name} group from app
app.user_management.app_group_group_member_import.insert_success=Imported new group member of the ${parent_app_group_name} app group - ${child_app_group_name}
app.user_management.app_group_group_member_import.delete_success=Deleted group member of the ${parent_app_group_name} app group - ${child_app_group_name}

# Group Push
app.user_management.grouppush.mapping.created.from.rule = A Group Push mapping to the group ${user_group_name} has been created from the rule ${rule_id} with the id - ${msg}.
app.user_management.grouppush.mapping.created.from.rule.error.duplicate = A Group Push mapping to the group ${user_group_name} did not get created from rule ${rule_id} because an existing mapping already existed.
app.user_management.grouppush.mapping.created.from.rule.warning.duplicate.name = A Group Push mapping did not get created from rule ${rule_id} to UserGroup ${user_group_name} since group with same name already exists in AppInstance ${app_instance_id}
app.user_management.grouppush.mapping.created.from.rule.warning.duplicate.name.tobecreated = A Group Push mapping did not get created from rule ${rule_id} to UserGroup ${user_group_name} since group with same name will already be created in AppInstance ${app_instance_id}
app.user_management.grouppush.mapping.created.from.rule.warning.upsertGroup.duplicate.name = UserGroup was created or updated. A Group Push mapping did not get created from rule ${rule_id} to UserGroup ${user_group_name} since group with same name already exists in AppInstance ${app_instance_id}
app.user_management.grouppush.mapping.created.from.rule.error.validation = A Group Push mapping to the group ${user_group_name} did not get created from rule ${rule_id} because of the validation error: ${msg}
app.user_management.grouppush.mapping.created.from.rule.errors = A Group Push mapping to the group ${user_group_name} did not get created from rule ${rule_id} because of errors: ${msg}
app.user_management.grouppush.mapping.deactivated.source.group.renamed = A Group push mapping to the group ${user_group_name} was deactivated because the source group was renamed.
app.user_management.grouppush.mapping.deactivated.source.group.renamed.failed = A Group push mapping to the group ${user_group_name} could not be deactivated when the source group was renamed.
app.user_management.grouppush.mapping.app.group.renamed = A Group push mapping to the group ${user_group_name} was renamed because the source group was renamed.
app.user_management.grouppush.mapping.app.group.renamed.failed = A Group push mapping to the group ${user_group_name} could not be renamed when the source group was renamed.
app.user_management.grouppush.mapping.and.groups.deleted.rule.deleted = The Group push mapping to the group ${user_group_name} will be deleted because its rule has been deleted.
app.user_management.grouppush.mapping.update.or.delete.failed.with.error = Changes to the Group push mapping for the group ${user_group_name} could not take effect due to error: ${msg}
app.user_management.grouppush.mapping.update.or.delete.failed = Changes to the Group push mapping for the group ${user_group_name} could not take effect.
platform.grouppush.appgroup.not.found = No appGroup found for the user group id: {0}
platform.grouppush.appgroup.oktamastered = Appgroup {0} is already Okta mastered

#
# Generic
#

app.generic.provision.assign_user_to_app=User provisioned to app
app.generic.provision.deactivate_user_from_app=User deprovisioned from app
app.generic.config.app_activated=App activated
app.generic.config.app_deactivated=App deactivated
app.generic.config.app_deleted=App deleted
app.generic.config.app_updated=App configuration updated ${custom_message}
app.generic.import.provisioning_data=Imported provisioning data for app
app.generic.import.import_user=Started importing users for app

app.generic.import.summary.custom_object=Imported Custom Objects: ${objects_total} scanned, ${objects_added} added, ${objects_updated} updated, ${objects_deleted} deleted
app.generic.import.details.add_custom_object=Import added new Custom Object of type ${custom_object_type} with id ${custom_object_id}
app.generic.import.details.update_custom_object=Import updated existing Custom Object of type ${custom_object_type} with id ${custom_object_id}
app.generic.import.details.delete_custom_object=Import removed existing Custom Object of type ${custom_object_type} with id ${custom_object_id}

app.generic.import.summary.user=Imported Users: ${objects_total} scanned, ${objects_unchanged} unchanged, ${objects_added} added, ${objects_updated} updated, ${objects_deleted} deleted
app.generic.import.details.add_user=Import added new User: ${app_username}
app.generic.import.details.update_user=Import updated existing User: ${app_username}
app.generic.import.details.delete_user=Import removed existing User: ${app_username}

app.generic.import.summary.group=Imported Groups: ${objects_total} scanned, ${objects_unchanged} unchanged, ${objects_added} added, ${objects_updated} updated, ${objects_deleted} deleted
app.generic.import.details.add_group=Import added new Group: ${group_name} - ${group_description}
app.generic.import.details.update_group=Import updated existing Group: ${group_name} - ${group_description}
app.generic.import.details.delete_group=Import removed existing Group: ${group_name} - ${group_description}

app.generic.import.summary.group_membership=Imported Group Members: ${objects_total} scanned, ${objects_unchanged} unchanged, ${objects_added} added, ${objects_deleted} deleted

app.generic.import.new_user=Import added new User: ${app_username}
app.generic.import.user_update=Import updated existing User: ${app_username}
app.generic.import.user_delete=Import removed existing User: ${app_username}
app.generic.import.user_match.complete=User matching complete
app.generic.import.started=${import_type} Import started via ${import_trigger}
app.generic.import.complete=Import complete, total time: ${import_time}

app.generic.config.app_username_update=User has changed their app username to ${app_username}
app.generic.config.app_password_update=User has changed their app password
app.generic.config.app_user_update=App user property has been updated

#
# Real time sync
#
app.realtimesync.import.details.add_user=Real time sync added new User: ${app_username}
app.realtimesync.import.details.update_user=Real time sync updated existing User: ${app_username}
app.realtimesync.import.details.delete_user=Real time sync removed existing User: ${app_username}
app.realtimesync.import_failed.details.email_length=Real time sync failed due to email address too long: ${app_error_code}
#
# App Instance
#

app.app_instance.change=App settings changed
app.app_instance.logo_update=Logo changed
app.app_instance.logo_reset=Logo reset
app.app_instance.label_update=Label changed
app.app_instance.seats_update=Number of seats changed
app.app_instance.icon_hidden=Do not display icon to users
app.app_instance.icon_displayed=Display icon to users
app.app_instance.icon_hidden_in_ios=Do not display icon in the Okta Mobile app
app.app_instance.icon_displayed_in_ios=Display icon in the Okta Mobile app
app.app_instance.toolbar_autosubmit_enabled=Toolbar autosubmit is enabled
app.app_instance.toolbar_autosubmit_disabled=Toolbar autosubmit is disabled
app.app_instance.outbound_delauth_enabled=Delegated authentication is enabled
app.app_instance.outbound_delauth_disabled=Delegated authentication is disabled
app.app_instance.sign_on_policy.change=Sign on policy changed
app.app_instance.sign_on_policy.new_rule=Rule created in sign on policy
app.app_instance.sign_on_policy.delete_rule=Rule deleted in sign on policy
app.app_instance.sign_on_policy.access_denied=User denied access due to sign on policy
app.app_instance.import_schedule_update=Import scheduled changed
app.app_instance.autoconfirm_imports_enabled=Imported new users will be automatically confirmed
app.app_instance.autoconfirm_imports_disabled=Imported users will not be automatically confirmed
app.app_instance.autoconfirm_both_imports_enabled=Imported new and existing users will be automatically confirmed
app.app_instance.autoactivate_imports_enabled=Imported users will be automatically activated
app.app_instance.autoactivate_imports_disabled=Imported users will not be automatically activated
app.app_instance.error_page_update=Using custom error page
app.app_instance.error_page_reset=Using default error page
app.app_instance.display_links_update=Number of links displayed changed
app.app_instance.import_ou_update=Organizational Unit to import changed
app.app_instance.suppress_activation_mail_enabled=Stop sending new user activation emails
app.app_instance.suppress_activation_mail_disabled=Sending new user activation emails
app.app_instance.activation_email_recipient_update=Recipient of new account credentials changed
app.app_instance.sign_on_method_update=Sign on method changed
app.app_instance.default_username_update=Application username format changed
app.app_instance.auth_token_update=Authentication token generated
app.app_instance.profile_master_enabled=Profile mastering enabled
app.app_instance.profile_master_disabled=Profile mastering disabled
app.app_instance.push_new_users_enabled=Pushing new users
app.app_instance.push_new_users_disabled=Importing new users
app.app_instance.push_profile_updates_enabled=Pushing user profile changes
app.app_instance.push_profile_updates_disabled=Importing user profile changes
app.app_instance.push_password_updates_enabled=Pushing user passwords
app.app_instance.push_password_updates_disabled=Stop pushing user passwords
app.app_instance.push_deactivated_users_enabled=Deprovisioning unassigned users
app.app_instance.push_deactivated_users_disabled=Stop deprovisioning unassigned users
app.app_instance.user_management_disabled=Disable provisioning
app.app_instance.default={0}
app.app_instance.config-error = Configuration error detected for ${app_instance_name}: ${config_error}
app.app_instance.custom_user_management_support_enabled=Custom Provisioning Support is enabled
app.app_instance.custom_user_management_support_disabled=Custom Provisioning Support is disabled
app.app_instance.personal=Personal App
app.app_instance.import_match_rule_update = Updated Import Match Rules

#
# App Editor
#

app.app_editor.app.create=User created new app (Version ${app_version_id})
app.app_editor.app.update=User updated app (Version ${app_version_id})

#
# API Event Exception
#
api.error.logged_event.exception=API Error: Event Exception
api.error.logged_event.unknown_exception=API Error: Unknown Exception

#
# API Token Lifecycle
#
api.token.revoke=API Token revoked ${clientAppMessage}
api.token.enable=API Token enabled
api.token.create=API Token created ${clientAppMessage}
api.token.client_app_message = for client application ${clientAppName}

#
# Policy Lifecycle
#
policy.created=Policy created (id: ${policyId}, type: ${policyType})
policy.activated=Policy activated (id: ${policyId}, type: ${policyType})
policy.deactivated=Policy deactivated (id: ${policyId}, type: ${policyType})
policy.updated=Policy updated (id: ${policyId}, type: ${policyType})
policy.deleted=Policy deleted (id: ${policyId}, type: ${policyType})

policy.rule.added=Policy rule (id: ${policyRuleId}, type: ${policyRuleType}) added to Policy (id: ${policyId}, type: ${policyType})
policy.rule.activated=Policy rule (id: ${policyRuleId}, type: ${policyRuleType}) activated in Policy (id: ${policyId}, type: ${policyType})
policy.rule.deactivated=Policy rule (id: ${policyRuleId}, type: ${policyRuleType}) deactivated in Policy (id: ${policyId}, type: ${policyType})
policy.rule.updated=Policy rule (id: ${policyRuleId}, type: ${policyRuleType}) updated in Policy (id: ${policyId}, type: ${policyType})
policy.rule.deleted=Policy rule (id: ${policyRuleId}, type: ${policyRuleType}) deleted from Policy (id: ${policyId}, type: ${policyType})

#
# Generic App Auth
#

app.auth.sso=User performed single sign on to app

#
# Admin
#

app.admin.sso.no_response       = SAML Response contained no confirmations
app.admin.sso.bad_response      = Could not parse SAML response
app.admin.sso.orgapp.notfound   = Could not find application instance

#
# Inbound Del Auth
#

app.inbound_del_auth.login_success=Successful inbound delegated authentication request for user ${username}
app.inbound_del_auth.failure.not_supported=App does not support delegated authentication
app.inbound_del_auth.failure.instance_not_found=External system attempted to delegate authentication to Okta with an unknown app instance id: ${instance_id}
app.inbound_del_auth.failure.invalid_request.could_not_parse_credentials=Could not parse credentials from incoming request
app.inbound_del_auth.failure.account_not_found=Could not find user matching username ${username} during delegated authentication from app: ${app_name}
# TODO: jtodd - don't think we should need loginResult here, consider having different messages for each type of failure
app.inbound_del_auth.failure.invalid_login_credentials=Got invalid credentials for username: ${username} trying to sign-in to app: ${app_name}. Login result code: ${login_result}

#
# Rich client auth
#
app.rich_client.instance_not_found=Rich client authentication failed: Unknown app instance id ${instance_id}
app.rich_client.account_not_found=Rich client authentication failed: Could not find ${app_name} user matching username ${username}
app.rich_client.multiple_accounts_found=Rich client authentication failed: Multiple ${app_name} users with username ${username} found
app.rich_client.login_failure=Rich client authentication failed for user ${username} to app ${app_name}
app.rich_client.login_success=Successful rich client authentication for user ${username} to app ${app_name}

#
# Deprovision Tasks
#
app.user_management.deprovision_task_complete=Deprovision task completed${empty app_username ? '' : ssfn:concat(' for user ', app_username)}

#
# Credentials recovery
#
app.generic.reversibility.credentials.recovery=Password recovered from previous assignment
app.generic.reversibility.personal.app.recovery=Personal app assignment recovered
app.generic.reversibility.individual.app.recovery=Individual app assignment recovered

#
# Google
#

app.google.sso.failure.relay_state_not_found=SSO Error: No RelayState passed in request
app.google.sso.failure.domain_not_found=SSO Error: Unable to determine Google domain from URI [${invalid_uri}]
app.google.sso.failure.invalid_continue_url=SSO Error: Could not parse domain from URI [${invalid_url}]
app.google.sso.failure.invalid_domain=SSO Error: Google domain [${invalid_domain}] is not valid
app.google.user_management.failure.api_login_failure=API login failed.
app.google.user_management.failure.api_service_forbidden=API service forbidden: ${app_error_code}
app.google.user_management.failure.provisioning=Failed to provision app user: ${app_error_code}
app.google.user_management.failure.user_import=Failed to import Google user: ${app_error_code}
app.google.user_management.failure.user_group_import=Failed to import groups for Google user: ${app_error_code}
app.google.user_management.failure.download.custom.objects=Failed to download group data: ${app_error_code}
app.google.user_management.failure.create.group=Failed to create Google group: ${app_error_code}
app.google.user_management.failure.delete.group=Failed to delete Google group: ${app_error_code}
app.google.user_management.failure.update.group=Failed to update Google group data: ${app_error_code}
app.google.user_management.failure.group.membership.update=Could not update Google group membership: ${app_error_code}
app.google.user_management.add_user_to_group=Added ${okta_username} to group '${group}'
app.google.user_management.remove_user_from_group=Removed ${okta_username} from group '${group}'

app.google.user_management.error.check_user_exists=Failed to verify that the user exists. ${app_error_code}
app.google.user_management.error.check_user_exists.invalid_domain=The user's email domain does not match the domain specified in Google Apps.
app.google.user_management.error.create_new_user=Failed to create new user. ${app_error_code}
app.google.user_management.error.deactivate_user=Failed to deactivate user. ${app_error_code}
app.google.user_management.error.reactivate_user=Failed to reactivate user. ${app_error_code}
app.google.user_management.error.push_password_update=Failed to push password update. ${app_error_code}
app.google.user_management.error.push_profile_update=Failed to push profile update. ${app_error_code}
app.google.user_management.error.download_users=Failed to download users. ${app_error_code}
app.google.user_management.error.import_user_profile=Failed to import user profile. ${app_error_code}
app.google.user_management.error.download_custom_objects=Failed to download custom objects. ${app_error_code}
app.google.user_management.error.create_group=Failed to create group. ${app_error_code}
app.google.user_management.error.create_group_duplicate=Failed to create group because group already exists. ${app_error_code}
app.google.user_management.error.update_group=Failed to update group. ${app_error_code}
app.google.user_management.error.delete_group=Failed to delete group. ${app_error_code}
app.google.user_management.error.download_group_members=Failed to retrieve members from group. ${app_error_code}
app.google.user_management.error.add_member_to_group=Failed to add user to group. ${app_error_code}
app.google.user_management.error.remove_member_from_group=Failed to remove user to group. ${app_error_code}
app.google.user_management.error.download_org_units=Failed to download organization units. ${app_error_code}
app.google.user_management.error.rateLimit=Rate limit exceeded for Google. ${app_error_code}
app.google.user_management.error.download_app_schema=Failed to download Google schema. ${app_error_code}
app.google.user_management.error.invalid_orgunit_id=The OrgUnit specified is invalid. Please refresh the Application Data and retry again. ${app_error_code}

app.google.api.error.DomainUserLimitExceeded=Maximum number of users permitted has been reached for this domain
app.google.api.error.InvalidEmailAddress=Invalid Email Address
app.google.api.error.InvalidFamilyName=Invald Family Name
app.google.api.error.InvalidGivenName=Invalid Given Name
app.google.api.error.UnknownError=Unknown error occurred while provisioning user
app.google.api.error.ServerBusy=Google Service is busy
app.google.api.error.InvalidValue=Invalid value while provisioning user
app.google.api.error.InvalidPassword=Password does not meet password policy
app.google.api.error.EntityExists=User already exists
app.google.api.error.InvalidUsername=Invalid User name
app.google.api.error.UserDeletedRecently=An account with this user name was recently deleted
app.google.api.error.default={0}

#
# Salesforce
#
app.salesforce.user_management.failure.invalid_api_credentials=API login failed because credentials were invalid
app.salesforce.user_management.failure.password_expired=API login failed because password has expired
app.salesforce.user_management.failure.api_service_not_available=API login failed because this application's service appears to be unavailable.
app.salesforce.user_management.failure.general_api_login_failure=API login failed for an unknown reason.
app.salesforce.user_management.failure.provisioning=Failed to provision user due to: ${app_error_code}
app.salesforce.user_management.failure.user_import=Failed import user in app due to: ${app_error_code}
app.salesforce.user_management.failure.no_api_response=The Salesforce API is not responding. Please ensure that your configurations are correct.
app.salesforce.user_management.failure.thirdparty_error=External API error: ${app_error_message}
app.salesforce.user_management.failure.cant.push.password=Unable to push password to Salesforce: ${app_error_code}
app.salesforce.user_management.sso.only.user.password.rejected=Unable to push a password for an SSO-Only user in Salesforce

app.salesforce.api.error.INVALID_OPERATION_WITH_EXPIRED_PASSWORD=The password used to connect to the Salesforce API has expired
app.salesforce.api.error.INVALID_LOGIN=The credentials used to log in to the Salesforce API were invalid; please check your Salesforce configuration
app.salesforce.api.error.INVALID_NEW_PASSWORD=The password being set does not meet the password requirements of your Salesforce configuration.
app.salesforce.api.error.default={0}

#
# GoToMeeting
#
app.gotomeeting.user_management.config.failure.api_login_failure=Sign-in to app failed because the API credentials were invalid. Message from API: ${app_error_code}
app.gotomeeting.user_management.config.failure.api_not_available=Couldn't connect to the GoToMeeting API service for app: ${app_name}.
app.gotomeeting.user_management.config.failure.user_import=Failed import user in app: ${app_name} due to: ${app_error_code}
app.gotomeeting.user_management.config.failure.user_provisioning=Failed to provision user in app: ${app_name} due to: ${app_error_code}
app.gotomeeting.user_management.config.failure.api_url_is_malformed=The URL used to connect the GoToMeeting API is malformed. Contact Okta if this persists.

app.gotomeeting.api.error.DefaultMessage=GoToMeeting API Error: [{0}] {1}
app.gotomeeting.api.error.InvalidLogin=This can occur for any of the following reasons: \
  1. The userid and/or password are invalid \
  2. The corporate account associated with the userid and password does not have the GoToMeeting API enabled \
  3. The userid/password is for a personal manager account.
app.gotomeeting.api.error.SoftLockout=Indicates that the account associated with the userid has been locked for \
  5 minutes due to 3 consecutive failed logon attempts
app.gotomeeting.api.error.HardLockout=Indicates that the account associated with the userid has been locked due to \
  10 consecutive failed logon attempts. Customer Care or Professional Services intervention is required to lift the \
  hard lockout
app.gotomeeting.api.error.InvalidEmailAddress=Email Address has incorrect syntax/format.
app.gotomeeting.api.error.EmailAlreadyInUseException=Email Address is already in use by another organizer in the same \
  account or is already invited to a different group.
app.gotomeeting.api.error.NoSuchConnection=The connection does not exist or has expired
app.gotomeeting.api.error.RateLimitExceeded=The rate limit for this call has been exceeded.
app.gotomeeting.api.error.InternalError=An unknown error occurred on the GoToMeeting Server. Please retry action. \
  If this message persists please contact GoToMeeting support.
app.gotomeeting.api.error.ServiceUnavailable=The GoToMeeting API is currently unable to process requests.
app.gotomeeting.api.error.NoSuchMember=No organizer exists for the supplied organizerEmail.

#
# GoToMeetingRest
#
app.gotomeeting_rest.api.error.DefaultMessage=GoToMeeting API Error: ${app_error_code}
app.gotomeeting_rest.user_management.config.failure.api_not_available=Couldn't connect to the GoToMeeting API service for app: ${app_name}.
app.gotomeeting_rest.user_management.config.failure.user_import=Failed import user in app: ${app_name} due to: ${app_error_code}
app.gotomeeting_rest.user_management.config.failure.user_provisioning=Failed to provision user in app: ${app_name} due to: ${app_error_code}
app.gotomeeting_rest.user_management.config.failure.api_url_is_malformed=The URL used to connect the GoToMeeting API is malformed. Contact Okta if this persists.
app.gotomeeting_rest.user_management.config.failure.api_auth_failed=OAuth authentication failed.

#
# Workday
#
app.workday.api.error.validate = Unable to validate Workday API Credentials: ${app_error_code}
app.workday.api.error.bind = Unable to bind to Workday API Endpoint: ${app_error_code}
app.workday.api.error.get-workers = Unable to fetch Workday users: ${app_error_code}
app.workday.api.error.get-worker-by-id = Unable to find Workday user by id: ${app_error_code}
app.workday.api.error.get-worker-by-username = Unable to find Workday user by username: ${app_error_code}
app.workday.api.error.parse-workers = Unable to parse Worker result from Workday: ${app_error_code}
app.workday.api.error.parse-groups = Unable to parse Group result from Workday: ${app_error_code}
app.workday.api.error.parse-group-assignments = Unable to parse Group Assignment result from Workday: ${app_error_code}
app.workday.api.error.get-groups = Unable to fetch provisioning groups from Workday: ${app_error_code}
app.workday.api.error.get-group-assignments = Unable to fetch provisioning group assignments from Workday: ${app_error_code}
app.workday.api.error.get-tx-logs = Unable to fetch Workday transaction logs: ${app_error_code}

workdayNoEmployeeIdPrompt=No Employee Id Prompt for WID found in custom reports. ${app_error_code}
workdayNullInResponse=Null in response from Workday. ${app_error_code}

# Legacy Workday messages
app.workday.api.error.default=Workday API Error
app.workday.api.error.search=Unable to perform search
app.workday.api.error.fetch=Unable to retrieve user
app.workday.api.error.update=Unable to update user
app.workday.api.error.builduser=Unable to build user: ${app_error_code}

#
# Yammer
#
app.yammer.api.error.validation=Unable to validate Yammer API configuration
app.yammer.api.error.check.user=Unable to check for user on Yammer
app.yammer.api.error.download.users=Unable to download users from Yammer
app.yammer.api.error.import.profile=Unable to import user profile from Yammer
app.yammer.api.error.push.profile=Unable to push user profile to Yammer
app.yammer.api.error.deactivation=Unable to deactivate user within Yammer
app.yammer.api.error.create.user=Unable to create user within Yammer
app.yammer.api.error.query=Unable to query Yammer API

#
# Echosign
#
app.echosign.api.error.connection=Failed to connect with the Echosign API key
app.echosign.api.error.search.by.id=Error when searching Echosign for User
app.echosign.api.error.search.by.login=Error when searching Echosign for Username
app.echosign.api.error.download.users=Error when fetching all users in Echosign
app.echosign.api.error.import.profile=Error when importing profile information for user
app.echosign.api.error.create=Error trying to create new user in EchoSign

#
# SuccessFactors
#
app.successfactors.api.exception = Failed to query SuccessFactors API
app.successfactors.api.error = Error parsing SuccessFactors API results

#
# Postini
#
app.postini.user_management.config.failure.api_login_failed=Failed to authenticate with the Postini API
app.postini.user_management.config.failure.api_not_available=Could not connect to the Postini API
app.postini.user_management.config.failure.configuration=Failed to set provisioning options for Postini
app.postini.user_management.config.failure.user_import=Failed to import users from Postini
app.postini.user_management.config.failure.provisioning=Failed to provision user in Postini
app.postini.user_management.failure.download_users=Failed to download users from Postini

#
# Webex
#
app.webex.api.error.validation = Failed to validate Webex Config: ${app_error_code}
app.webex.api.error.default = Webex failure: ${app_error_code}

#
# Zendesk
#
app.zendesk.api.error.validate=Failed to validate Zendesk API credentials
app.zendesk.api.error.download.groups=Failed to download group information from Zendes
app.zendesk.api.error.parse.groups=Failed to parse group information from Zendesk
app.zendesk.api.error.download.organizations=Failed to download organization information from Zendesk
app.zendesk.api.error.get.login=Failed to get user by login
app.zendesk.api.error.push.password=Failed to push password to Zendesk
app.zendesk.api.error.push.profile=Failed to push user profile to Zendesk
app.zendesk.api.error.create.user=Failed to create new user in Zendesk
app.zendesk.api.error.get.users=Failed to download users from Zendesk
app.zendesk.api.error.role.restriction=Invalid Role / Ticket Restriction combination for Zendesk user

#
# Confluence
#
confluenceLoginFailed=Could not connect to the Confluence API, please check your API Endpoint and Key
app.confluence.api.error.login=Failed to login to Confluence
app.confluence.api.error.logout=Failed to logout from Confluence
app.confluence.api.error.parse.groups=Failed to parse group information from Confluence
app.confluence.api.error.deactivate.user=Failed to deactivate user from Confluence
app.confluence.api.error.reactivate.user=Failed to reactivate user from Confluence
app.confluence.api.error.check.user.exists=Failed to verify a user exists from Confluence
app.confluence.api.error.check.group.exists=Failed to verify a group exists from Confluence
app.confluence.api.error.get.user=Failed to download a user from Confluence
app.confluence.api.error.convert.remote.user.to.app.user=Failed to convert a remote user to an app user
app.confluence.api.error.convert.app.user.to.remote.user=Failed to convert an app user to a remote user
app.confluence.api.error.download.users=Failed to download all user from Confluence
app.confluence.api.error.create.new.user=Failed to create new a user
app.confluence.api.error.remove.user=Failed to remove a user from Confluence
app.confluence.api.error.create.new.group=Failed to create new a group
app.confluence.api.error.remove.group=Failed to remove a group from Confluence
app.confluence.api.error.add.user.to.group=Failed to assign a user to a group from Confluence
app.confluence.api.error.remove.user.to.group=Failed to remove a user from a group from Confluence
app.confluence.api.error.get.user.groups=Failed to download a user's groups from Confluence
app.confluence.api.error.push.password.update=Failed to push a new password to a user to Confluence
app.confluence.api.error.push.profile.update=Failed to push a profile to a user to Confluence
app.confluence.api.error.import.user.profile=Failed to download a user's profile from Confluence

#
# SugarCRM
#
app.sugarcrm.api.error.login=Failed to login to SugarCRM
app.sugarcrm.api.error.logout=Failed to logout from SugarCRM
app.sugarcrm.api.error.hash.password=Failed to hash password
app.sugarcrm.api.error.set.entry=Failed to set entry
app.sugarcrm.api.error.get.entry.list=Failed to get entry list
app.sugarcrm.api.error.download.server.set.values=Failed to download values from SugarCRM
app.sugarcrm.api.error.deactivate.user=Failed to deactivate user from SugarCRM
app.sugarcrm.api.error.reactivate.user=Failed to reactivate user from SugarCRM
app.sugarcrm.api.error.check.user.exists=Failed to verify a user exists from SugarCRM
app.sugarcrm.api.error.download.users=Failed to download all user from SugarCRM
app.sugarcrm.api.error.create.new.user=Failed to create a new user
app.sugarcrm.api.error.push.password.update=Failed to push a new password to a user to SugarCRM
app.sugarcrm.api.error.push.profile.update=Failed to push a profile to a user to SugarCRM
app.sugarcrm.api.error.import.user.profile=Failed to download a user's profile from SugarCRM

#
# Jira
#
jiraLoginFailed=Could not connect to the Jira API, please check your API Endpoint and Key
app.jira.api.error.binding=Failed to bind with Jira. ${app_error_code}
app.jira.api.error.login=Failed to login to Jira. ${app_error_code}
app.jira.api.error.logout=Failed to logout from Jira. ${app_error_code}
app.jira.api.error.check.user.exists=Failed to verify a user exists from Jira. ${app_error_code}
app.jira.api.error.get.user=Failed to download a user from Jira. ${app_error_code}
app.jira.api.error.convert.remote.user.to.app.user=Failed to convert a remote user to an app user. ${app_error_code}
app.jira.api.error.convert.app.user.to.remote.user=Failed to convert an app user to a remote user. ${app_error_code}
app.jira.api.error.download.users=Failed to download all user from Jira. ${app_error_code}
app.jira.api.error.create.new.user=Failed to create new a user. ${app_error_code}
app.jira.api.error.push.password.update=Failed to push a new password to a user to Jira. ${app_error_code}
app.jira.api.error.push.profile.update=Failed to push a profile to a user to Jira. ${app_error_code}
app.jira.api.error.import.user.profile=Failed to download a user's profile from Jira. ${app_error_code}
app.jira.api.error.upsert.group=Failed to create a new user group. ${app_error_code}
app.jira.api.error.delete.group=Failed to delete user group. ${app_error_code}
app.jira.api.error.update.group.membership=Failed to update users in group. ${app_error_code}
app.jira.api.error.download.server.set.values=Failed to download user groups list. ${app_error_code}

#
# ServiceNow
#
servicenowLoginFailed=Could not verify the ServiceNow administrator login and password; please confirm that these are set correctly. ${app_error_code}
app.servicenow.api.error.binding.user=Failed to bind with ServiceNow. ${app_error_code}
app.servicenow.api.error.download.users=Failed to download all user from ServiceNow. ${app_error_code}
app.servicenow.api.error.create.new.user=Failed to create new a user. ${app_error_code}
app.servicenow.api.error.check.user.exists=Failed to verify a user exists from ServiceNow. ${app_error_code}
app.servicenow.api.error.push.password.update=Failed to push a new password to a user to ServiceNow. ${app_error_code}
app.servicenow.api.error.push.profile.update=Failed to push a profile to a user to ServiceNow. ${app_error_code}
app.servicenow.api.error.import.user.profile=Failed to download a user's profile from ServiceNow. ${app_error_code}
app.servicenow.api.error.deactivate.user=Failed to deactivate user from ServiceNow. ${app_error_code}
app.servicenow.api.error.reactivate.user=Failed to reactivate user from ServiceNow. ${app_error_code}
app.servicenow.api.error.validation=Failed to validate your Admin credentials. ${app_error_code}
app.servicenow.api.error.get.keys.by.user.id=Failed to fetch user. ${app_error_code}
app.servicenow.api.error.get.departments=Failed to download departments list from ServiceNow. ${app_error_code}
app.servicenow.api.error.get.locations=Failed to download locations list from ServiceNow. ${app_error_code}
app.servicenow.api.error.get.costcenters=Failed to download cost centers list from ServiceNow. ${app_error_code}

app.servicenow.api.error.import.manager.profile=Failed to resolve ServiceNow manager hash: ${app_error_code}


#
# ServiceNow Plugin Version
#
app.servicenow_app2.api.validation.failure=Could not verify the ServiceNow administrator login and password; please confirm that these are set correctly.

app.servicenow_app2.api.error.binding.user=Failed to bind with ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.download.users=Failed to download all user from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.create.new.user=Failed to create new a user. ${app_error_code}
app.servicenow_app2.api.error.check.user.exists=Failed to verify a user exists from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.push.password.update=Failed to push a new password to a user to ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.push.profile.update=Failed to push a profile to a user to ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.import.user.profile=Failed to download a user profile from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.deactivate.user=Failed to deactivate user from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.reactivate.user=Failed to reactivate user from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.validation=Failed to validate your Admin credentials. ${app_error_code}
app.servicenow_app2.api.error.get.keys.by.user.id=Failed to fetch user. ${app_error_code}
app.servicenow_app2.api.error.get.departments=Failed to download departments list from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.get.locations=Failed to download locations list from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.get.costcenters=Failed to download cost centers list from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.download.groups=Failed to get user groups from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.upsert.group=Failed to upsert group in ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.delete.group=Failed to delete group in ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.download.group.memberships=Failed to get group memberships from ServiceNow. ${app_error_code}
app.servicenow_app2.api.warn.upsert.group=Failed to get existent group memberships from ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.add.group.memberships=Failed to add group membership in ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.delete.group.memberships=Failed to delete group membership in ServiceNow. ${app_error_code}
app.servicenow_app2.api.error.import.manager.profile=Failed to find manager profile in AD ${app_error_code}


#
# Coupa
#
app.coupa.api.connection.error=Failed to connect to Coupa API


#
# MSBPOS
#
app.msbpos.api.error.validate.creds=Failed to validate MSBPOS Credentials
app.msbpos.api.error.deactivate.user=Failed to deactivate user in MSBPOS:
app.msbpos.api.error.check.user.exists=Failed while checking for user in MSBPOS
app.msbpos.api.error.activate.license=Failed to add license to user in MSBPOS
app.msbpos.api.error.get.subscription=Failed to find subscription id in MSBPOS
app.msbpos.api.error.push.password=Failed to push password to MSBPOS
app.msbpos.api.error.create.user=Failed to create user in MSBPOS

#
# BIG Machines
#
app.bigmachines.api.error.connection=Failed to connect to BigMachines
app.bigmachines.api.error.login=Failed to authenticate against BigMachines
app.bigmachines.api.error.logout=Failed to logout from BigMachines
app.bigmachines.api.error.check.user.exists=Failed to check if user exists in BigMachines
app.bigmachines.api.error.profile.update=Failed to update profile for user in BigMachines
app.bigmachines.api.error.create=Failed to create in BigMachines
app.bigmachines.api.error.import=Failed to import user in BigMachines
app.bigmachines.api.error.deactivate=Failed to deactivate user in BigMachines
app.bigmachines.api.error.activate=Failed to Activate user in BigMachines

#
# Central Desktop
#
app.centraldesktop.api.error.connection=Failed to connect to CentralDesktop
app.centraldesktop.api.error.login=Failed to authenticate against CentralDesktop
app.centraldesktop.api.error.logout=Failed to logout from CentralDesktop
app.centraldesktop.api.error.check.user.exists=Failed to check if user exists in CentralDesktop
app.centraldesktop.api.error.profile.update=Failed to update profile for user in CentralDesktop
app.centraldesktop.api.error.create=Failed to create user in CentralDesktop
app.centraldesktop.api.error.import=Failed to import user in CentralDesktop
app.centraldesktop.api.error.deactivate=Failed to deactivate user in CentralDesktop
app.centraldesktop.api.error.password.update=Failed to update user password in CentralDesktop

# Office365 Messages
app.office365.api.error.validate.creds = Could not validate your Office 365 credentials, received error: ${app_error_code}
app.office365.api.error.validate.creds.unknown.exception = Could not communicate with Office 365 to validate your credentials, received error: ${app_error_code}
app.office365.api.error.download.custom.objects = Could not download group/role/license data for your Office 365 instance, received error: ${app_error_code}
app.office365.api.error.download.users = Could not download all users from your Office 365 instance, received error: ${app_error_code}
app.office365.api.error.download.groups = Could not download all groups from your Office 365 instance, received error: {app_error_code}
app.office365.api.error.deactivate.user = Could not deactivate Office 365 user, received error: ${app_error_code}
app.office365.api.error.reactivate.user = Could not reactivate Office 365 user, received error: ${app_error_code}
app.office365.api.error.check.user.exists = Could not determine status of Office 365 user, received error: ${app_error_code}
app.office365.api.error.push.password = Could not push password for Office 365 user, received error: ${app_error_code}
app.office365.api.error.create.user = Could not create user in Office 365, received error: ${app_error_code}
app.office365.api.error.push.profile = Could not push profile for Office 365 user, received error: ${app_error_code}
app.office365.api.error.import.profile = Could not import profile for Office 365 user, received error: ${app_error_code}
app.office365.api.error.ad.user = User is assigned to more than one instance of Active Directory, could not set Immutable ID
app.office365.api.error.no.endpoints.found = No Office 365 endpoint found to send our request.
app.office365.api.error.endpoint.unavailable = Unable to reach the Office 365 endpoint: ${app_error_code}
app.office365.api.error.group.create.failure = Could not create Office 365 group, received error: ${app_error_code}
app.office365.api.error.group.create.failure.name.in.use = Could not create Office 365 group because the name is already in use, received error: ${app_error_code}
app.office365.api.error.group.update.failure = Could not update Office 365 group, received error: ${app_error_code}
app.office365.api.error.group.update.failure.not.found = Could not update Office 365 group because it was not found, received error: ${app_error_code}
app.office365.api.error.group.delete.failure = Could not delete Office 365 group, received error: ${app_error_code}
app.office365.api.error.group.membership.update.failure = Could not update the Office 365 group membership, received error: ${app_error_code}
app.office365.api.error.group.membership.update.removal.failure = Could not update the Office 365 group membership because of an error removing a user from the group, received error: ${app_error_code}
app.office365.api.error.group.membership.update.assignment.failure = Could not update the Office 365 group membership because of an error assigning a user to the group, received error: ${app_error_code}
app.office365.api.error.group.membership.update.group.not.found.failure = Could not update the Office 365 group membership because the group could not be found, received error: ${app_error_code}
app.office365.api.sync.complete = Sync completed. countUser=${count_user}, countUserFailure=${count_user_failure}, countGroup=${count_group}, countGroupFailure=${count_group_failure}, countContact=${count_contact}, countContactFailure=${count_contact_failure}
app.office365.api.error.sync = Failed to sync any object to Office 365, received error: ${app_error_code}
app.office365.api.error.sync.finalize = Failed to finalize export to Office 365, received error: ${app_error_code}
app.office365.api.error.sync.group = Failed to sync group, received error: ${app_error_code}
app.office365.api.error.sync.user = Failed to sync user, received error: ${app_error_code}
app.office365.api.error.sync.contact = Failed to sync contact, received error: ${app_error_code}
app.office365.api.error.x-ms-forwarded-client-ip-header.absent = X-MS-Forwarded-Client-IP header either empty or not found in the request.
app.office365.api.error.no-license-found = No Office 365 license is specified for the user
app.office365.api.error.multiple-licenses-found = Multiple license types selected to be assigned to the user. Only one license type allowed to be selected

#
# Dropbox
#
dropboxVerifyFailed=Could not connect to Dropbox API, please check your OAuth Token and Secret
app.dropbox.api.error.validation=Unable to validate Dropbox API configuration. ${app_error_code}
app.dropbox.api.error.check.user=Unable to check for user on Dropbox. ${app_error_code}
app.dropbox.api.error.download.users=Unable to download Dropbox users. ${app_error_code}
app.dropbox.api.error.import.profile=Unable to import user profile from Dropbox. Note that this feature will not work for users who are only INVITED. ${app_error_code}
app.dropbox.api.error.push.profile=Unable to push user profile to Dropbox. ${app_error_code}
app.dropbox.api.error.deactivation=Unable to deactivate Dropbox user. ${app_error_code}
app.dropbox.api.error.create.user=Unable to create Dropbox user. ${app_error_code}
app.dropbox.api.error.push.password.update=Unable to update password for the given Dropbox user. Note that this feature will not work for users who are only INVITED. ${app_error_code}
app.dropbox.api.error.query=Unable to query Dropbox API. ${app_error_code}
app.dropbox.api.error.rateLimit.exceeded=Rate limit exceeded for Dropbox. ${app_error_code}

#
# HipChat
#
hipchatVerifyFailed=Could not connect to Hipchat API, please check your API Token
app.hipchat.api.error.validation=Unable to validate Hipchat API configuration. ${app_error_code}
app.hipchat.api.error.check.user=Unable to check for user on Hipchat. ${app_error_code}
app.hipchat.api.error.download.users=Unable to download Hipchat users. ${app_error_code}
app.hipchat.api.error.import.profile=Unable to import user profile from Hipchat. ${app_error_code}
app.hipchat.api.error.push.profile=Unable to push user profile to Hipchat. ${app_error_code}
app.hipchat.api.error.deactivation=Unable to deactivate Hipchat user. ${app_error_code}
app.hipchat.api.error.reactivation=Unable to reactivate Hipchat user. ${app_error_code}
app.hipchat.api.error.create.user=Unable to create Hipchat user. ${app_error_code}
app.hipchat.api.error.push.password.update=Unable to update password for the given Hipchat user. ${app_error_code}
app.hipchat.api.error.query=Unable to query Hipchat API. ${app_error_code}
app.hipchat.rateLimit.exceeded=Rate limit exceeded for Hipchat ${app_error_code}

#
# Active Directory
#

app.ad.config.agent.agent_created=Active Directory agent ${agent_name} created
app.ad.config.agent.agent_deactivated=Active Directory agent ${agent_name} deactivated
app.ad.config.agent.agent_reactivated=Active Directory agent ${agent_name} reactivated
app.ad.config.agent.agent_reactivate_failed_missing_token=Cannot reactivate the Active Directory agent ${agent_name} because the token has been removed. You must delete and re-install the agent.
app.ad.config.agent.agent_deleted=Active Directory agent ${agent_name} deleted
app.ad.agent.disconnected=Active Directory agent ${agent_name} stopped connecting to Okta
app.ad.agent.reconnected=Active Directory agent ${agent_name} reconnected to Okta

app.ad.api.user_import.warn.skipped_user.internal_object=Skipping the import of user '${distinguished_name}' because their account has attribute "iscriticalsystemobject" = true. Please consult with your Active Directory admin if you believe this user should be imported.
app.ad.api.user_import.warn.skipped_user.invalid_user_account_control=Skipping import of user '${distinguished_name}'. Expected this user's UserAccountControl flag in Active Directory to be a valid integer. Got: [${user_account_control}]. Please consult with your Active Directory admin if you believe this user should be imported.
app.ad.api.user_import.warn.skipped_user.missing_required_attribute=Skipping import of user '${distinguished_name}'. Expected required AD attribute: ${ad_attr_name}, (Okta attribute: ${okta_attr_name}) to not be null. Please consult with your Active Directory admin if you believe this user should be imported.
app.ad.api.user_import.warn.skipped_user.attribute_too_long=Skipping import of user '${distinguished_name}'. AD attribute: ${ad_attr_name}, (Okta attribute: ${okta_attr_name}) with the value of ${ad_attr_value} was too long to be saved. Please consult with your Active Directory admin if you believe this user should be imported.

# Keys used when user_pricipal_name is null
app.ad.api.user_import.warn.skipped_user.internal_object.unknown_user=Skipping the import of AD user with unknown username because their account has attribute "iscriticalsystemobject" = true. Please consult with your Active Directory admin if you believe this user should be imported.
app.ad.api.user_import.warn.skipped_user.invalid_user_account_control.unknown_user=Skipping import of AD user with unknown username. Expected this user's UserAccountControl flag in Active Directory to be a valid integer. Got: [${user_account_control}]. Please consult with your Active Directory admin if you believe this user should be imported.
app.ad.api.user_import.warn.skipped_user.missing_required_attribute.unknown_user=Skipping import of AD user with unknown username. Expected required AD attribute: ${ad_attr_name}, (Okta attribute: ${okta_attr_name}) to not be null. Please consult with your Active Directory admin if you believe this user should be imported.

app.ad.api.user_import.warn.skipped_ou.missing_required_attribute=Skipping the import of OU with missing attributes: DN: ${ou_attr_dn}, GUID: ${ou_attr_guid}, Name: ${ou_attr_name}

app.ad.outbound.delauth.no_connected_agent=Delegated authentication request for user: ${app_username} in app ${app_name} was not processed. No agents are connected to Okta.
app.ad.outbound.delauth.timeout=Delegated authentication request for user: ${app_username} in app ${app_name} timed out. Ensure that the agent for your directory is connected to Okta.


# Built from AgentActionResult
app.ad.agent.start=Directory agent ${agent_name} started
app.ad.agent.start.error=Directory agent ${agent_name} failed to start with error: ${agent_error_message}
app.ad.agent.config=Directory agent ${agent_name} updated its configuration
app.ad.agent.config.error=Directory agent ${agent_name} encountered a configuration error: ${agent_error_message}
app.ad.agent.scan=Directory agent ${agent_name} performed an import
app.ad.agent.scan.error=Directory agent ${agent_name} encountered an import error: ${agent_error_message}
app.ad.agent.upgrade=Directory agent ${agent_name} upgraded
app.ad.agent.upgrade.error=Directory agent ${agent_name} upgraded
app.ad.agent.user_auth=User Auth Success. Agent: ${agent_name}.
app.ad.agent.user_auth.error=User Auth Failure. Agent ${agent_name}. Message: ${agent_error_message}
app.ad.agent.dir-invoke=Directory agent ${agent_name} performed a Directory Invoke command
app.ad.agent.dir-invoke.error=Directory agent ${agent_name} encountered an error performing a Directory Invoke: ${agent_error_message}
app.ad.agent.read-ldap=Directory agent ${agent_name} performed an LDAP Read
app.ad.agent.read-ldap.error=Directory agent ${agent_name} encountered an error performing an LDAP Read: ${agent_error_message}
app.ad.agent.user-auth-and-update=User Auth and Update Success. Agent: ${agent_name}.
app.ad.agent.user-auth-and-update.error=Directory Agent ${agent_name} encountered an error performing a User Auth and Update action: ${agent_error_message}
app.ad.agent.write-ldap=Directory agent ${agent_name} performed an LDAP Write
app.ad.agent.write-ldap.error=Directory agent ${agent_name} encountered an error performing an LDAP Write: ${agent_error_message}
app.ad.agent.real-time-sync=Directory RealTimeSync Success. Agent: ${agent_name}.
app.ad.agent.real-time-sync.error=Directory Agent ${agent_name} encountered an error performing a RealTimeSync action: ${agent_error_message}
app.ad.agent.modify-config=Directory agent ${agent_name} had its configuration modified.
app.ad.agent.modify-config.error=Directory Agent ${agent_name} encountered an error performing a ModifyConfig action: ${agent_error_message}
app.ad.agent.read-config=Directory agent ${agent_name} had its configuration read.
app.ad.agent.read-config.error=Directory Agent ${agent_name} encountered an error performing a ReadConfig action: ${agent_error_message}
app.ad.agent.fetch-logs=Directory agent ${agent_name} had logs uploaded.
app.ad.agent.fetch-logs.error=Directory Agent ${agent_name} encountered an error performing a FetchLogs action: ${agent_error_message}
app.ad.agent.read-schema=Directory agent ${agent_name} performed schema read operation;
app.ad.agent.read-schema.error=Directory agent ${agent_name} encountered an error performing schema read: ${agent_error_message};
app.ad.agent.read-forest-topology=Directory agent ${agent_name} performed topology import operation;
app.ad.agent.read-forest-topology.error=Directory agent ${agent_name} encountered an error performing topology import operation: ${agent_error_message};
app.ad.agent.read-dirsync=Directory agent ${agent_name} performed dirsync operation;
app.ad.agent.read-dirsync.error=Directory agent ${agent_name} encountered an error performing dirsync: ${agent_error_message};

# AD Group push results
app.ad.group.provision.create.error=Error provisioning AD group: {0}
app.ad.group.provision.modify.error=Error updating AD group: {0}
app.ad.group.provision.delete.error=Error deleting AD group: {0}
app.ad.group.provision.updateMembershipError=Error ''{2}'' updating group membership for group={0} in directory {1}​.
# LDAP login results
app.ldap.login.success=LDAP authentication succeeded
app.ldap.login.bad_password=LDAP authentication failed: bad username or password
app.ldap.login.expired_password=LDAP authentication failed: password has expired (${app_error_code})
app.ldap.login.locked_account=LDAP authentication failed: account is locked (${app_error_code})
app.ldap.login.disabled_account=LDAP authentication failed: account is disabled (${app_error_code})
app.ldap.login.unknown_failure=LDAP authentication failed for unknown reasons: (${app_error_code})

# AD login results
app.ad.login.success=Active Directory authentication succeeded
app.ad.login.bad_password=Active Directory authentication failed: bad username or password
app.ad.login.expired_password=Active Directory authentication failed: password has expired (${app_error_code})
app.ad.login.locked_account=Active Directory authentication failed: account is locked (${app_error_code})
app.ad.login.unknown_failure=Active Directory authentication failed for unknown reasons: (${app_error_code})

app.ad.password.reset.unlock-failed = Active Directory failed to reset accountLockTime for User: ${app_username}, check the permissions on the service account
app.ad.password.reset.success = Active Directory password reset was successful for User : ${app_username}.
app.ad.password.reset.failure = Active Directory failed to reset password for User : ${app_username}.
app.ad.user.account.unlock.failure = Active Directory user account unlock failed for user : ${app_username}.
app.ad.user.account.unlock.success = Active Directory user account unlock succeeded for user : ${app_username}.
app.ldap.jit.ambiguous = JIT failed due to ambiguous name for User: ${app_error_code}, ensure that only one directory refers to this User
app.ldap.agent.password_reset=LDAP agent ${agent_name} performed a password reset
app.ldap.agent.password_reset.error=LDAP agent ${agent_name} failed to performed a password reset
app.ldap.agent.password_reset.timeout=LDAP agent ${agent_name} password reset timed out

app.ldap.agent.password_change.timeout= LDAP agent ${agent_name} password change timed out
app.ldap.agent.password_change=LDAP agent ${agent_name} performed a password change

app.ldap.agent.password_update=LDAP agent ${agent_name} performed a password update
app.ldap.agent.password_update.error=LDAP agent ${agent_name} failed to perform a password update

# IWA Applications messages
iwa.ping=IWA Ping Action Received
iwa.ping.error=Failed to ping IWA agent: ${error_message}
iwa.invalid_certificate=Invalid IWA SSO certificate
iwa.no_certificate=No IWA SSO certificate provided from user: ${app_username}
iwa.invalid_token=Invalid IWA SSO redirect token
iwa.invalid_xml_signature=Invalid IWA XML signature from user: ${app_username}
iwa.ip_not_in_range=IWA agent's IP is not in the range of allowed IP addresses. User tried to log in: ${app_username}
iwa.created_successfully=Created IWA agent with redirect url: ${iwa_url} and version: ${iwa_version}
iwa.creating_failed=Failed creating IWA agent with redirect url: ${iwa_url} and version: ${iwa_version}
iwa.updated_successfully=Updated IWA agent: ${iwa_name}. ${iwa_custom_msg}
iwa.updating_failed=Failed to update IWA agent ${iwa_name}. Error message: ${iwa_custom_msg}
iwa.removed=Removed IWA agent ${iwa_name}
iwa.disabled=Disabled IWA agent ${iwa_name}
iwa.login_attempt_from_unknown_ip=Tried to login using IWA SSO from unknown IP: ${iwa_custom_msg}
iwa.primary_not_found=No primary IWA app was found. Using default login page
iwa.auth=IWA authentication result: ${iwa_custom_msg}
iwa.went_offline=IWA agent ${iwa_custom_msg} went offline
iwa.went_online=IWA agent ${iwa_custom_msg} is back to live. Setting it to backup
iwa.promoted_to_primary=No primary IWA was found. Promoting backup ${iwa_custom_msg} to primary
iwa.ad_agents_went_offline=IWA agent ${iwa_name} could not be verified because no active AD Agent available
iwa.no_agents_promoted_to_primary=There is no primary IWA agent. Unable to find a backup IWA agent to promote to primary.
iwa.custom=${iwa_custom_msg}

###############################################################################
# Testing
###############################################################################

app.test.success_message=Test id: ${id} message: ${message}

###############################################################################
# Exception Messages
###############################################################################
exception.invalid_event_type=ReportEventProcessor can't process event of type {0}

###############################################################################
# Platform - Groups
###############################################################################

platform.group_app_assignment.app_add=App ${instance_name} added to group ${group_name}
platform.group_app_assignment.app_remove=App ${instance_name} removed from group ${group_name}
platform.group_app_assignment.app_edit=App ${instance_name} properties edited in group ${group_name}

###############################################################################
# Inbound SAML
###############################################################################
core.user_auth.saml2.inbound_saml_login_failed = Inbound SAML login failed with message: ${message}
core.user_auth.saml2.user_create_failed = Inbound SAML user creation failed for user: ${login}

# rightscale messages
RightscaleVerifyFailed=Could not verify the Rightscale api username, password and id; please confirm that these are set \
  correctly
app.rightscale.api.error.validate=Failed to validate Rightscale API credentials
app.rightscale.api.error.download.groups=Failed to download group information from Rightscale
app.rightscale.api.error.push.profile=Failed to push user profile to Rightscale: ${app_error_code}
app.rightscale.api.error.create.user=Failed to create new user in Rightscale: ${app_error_code}
app.rightscale.api.error.get.users=Failed to download users from Rightscale: ${app_error_code}
app.rightscale.api.error.login=Failed to login to Rightscale: ${app_error_code}
app.rightscale.api.error.download.users=Failed to download users from Rightscale: ${app_error_code}

app.boxnet.api.error.response=Could not connect to Box. ${app_error_code}
app.boxnet.api.error.invalid_user_login=User login is invalid. ${app_error_code}
app.boxnet.api.error.check_user_exists_external=User already exists on Box, but is not part of Box Enterprise account. ${app_error_code}
app.boxnet.api.error.check_user_exists=Could not verify that the user exists. ${app_error_code}
app.boxnet.api.error.deactivate_user=Could not deactivate user. ${app_error_code}
app.boxnet.api.error.reactivate_user=Could not reactivate user. ${app_error_code}
app.boxnet.api.error.download.users=Could not download users. ${app_error_code}
app.boxnet.api.error.create_new_user=Could not create new user. ${app_error_code}
app.boxnet.api.error.push.profile.update=Could not push profile update. ${app_error_code}
app.boxnet.api.error.import.user.profile=Could not import user profile. ${app_error_code}
app.boxnet.api.error.download.groups=Could not download groups. ${app_error_code}
app.boxnet.api.error.download.group_users=Could not download group users. ${app_error_code}
app.boxnet.api.error.push.groups_set=Could not add user to specified groups. ${app_error_code}
app.boxnet.api.error.push.remove_from_groups=Could not remove user from specified groups. ${app_error_code}
app.boxnet.api.error.delete.group=Could not delete group. ${app_error_code}
app.boxnet.api.error.create.group=Could not create group. ${app_error_code}
app.boxnet.api.error.user.push.conflict_in_group=Skipped push of conflicting user in Box.
app.boxnet.api.error.validate_parent_folder=Could not validate parent folder. ${app_error_code}
app.boxnet.api.error.create_personal_folder=Could not create personal folder. ${app_error_code}
app.boxnet.api.error.create_personal_folder.conflict=In parent folder, personal folder already exists. ${app_error_code}
app.boxnet.api.error.personal_folder_sync_state=Could not configure the personal folder to sync folder to desktop. ${app_error_code}
app.boxnet.api.error.assign_folder_permissions=Could not assign folder permissions for personal folder. ${app_error_code}
app.boxnet.api.error.personal_folder_name=Personal folder name is invalid for user. ${app_error_code}
app.boxnet.api.error.add.email.alias=Could not add email alias ${alias} for user. ${app_error_code}

# netsuite messages
app.netsuite.api.error.auth=Failed to authenticate with NetSuite
app.netsuite.api.error.check_user_exists=Failed to check if user exists on NetSuite
app.netsuite.api.error.create_new_user=Failed to create user in NetSuite
app.netsuite.api.error.deactivate_user=Failed to deactivate user in NetSuite
app.netsuite.api.error.reactivate_user=Failed to reactivate user in NetSuite
app.netsuite.api.error.import_user_profile=Failed to import user from NetSuite
app.netsuite.api.error.download_custom_objects=Failed to download roles from NetSuite
app.netsuite.api.error.download_users=Failed to download users from NetSuite
app.netsuite.api.error.push_profile_update=Failed to push profile update for user to NetSuite
app.netsuite.api.error.push_password_update=Failed to push password update for user in NetSuite

# concur messages
app.concur.api.error.auth=Error authenticating against Concur: ${app_error_code}
app.concur.api.error.check_user_exists=Error while verifying if user exists on Concur: ${app_error_code}
app.concur.api.error.create_user=Error while creating Concur user: ${app_error_code}
app.concur.api.error.deactivate_user=Error while deactivating user: ${app_error_code}
app.concur.api.error.reactivate_user=Error while reactivating user: ${app_error_code}
app.concur.api.error.import_user_profile=Error while trying to import Concur user profile for user: ${app_error_code}
app.concur.api.error.push_profile_update=Error while trying to push Concur profile update for user: ${app_error_code}
app.concur.api.error.push_password_update=Error pushing Concur password for user: ${app_error_code}
app.concur.api.error.generic=Concur API error: ${app_error_code}

# Lotus Domino
app.lotus_domino.api.exception=Error calling Lotus Domino API
app.lotus_domino.api.error.push.password.update=Error pushing password: ${app_error_code}

#
# VeevaVault
#
veevaVaultLoginFailed=Could not verify the Veeva Vault administrator login and password; please confirm that these are set correctly. ${app_error_code}
app.veeva_vault.api.error.binding.user=Failed to bind with Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.download.custom.objects = Could not download custom user data for your Veeva Vault instance. ${app_error_code}
app.veeva_vault.api.error.download.users=Failed to download users from Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.create.new.user=Failed to create new a user for Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.check.user.exists=Failed to verify a user exists from Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.push.profile.update=Failed to push a profile to a user to Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.import.user.profile=Failed to download a user's profile from Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.deactivate.user=Failed to deactivate user from Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.reactivate.user=Failed to reactivate user from Veeva Vault. ${app_error_code}
app.veeva_vault.api.error.validation=Failed to validate your Admin credentials. ${app_error_code}
app.veeva_vault.api.error.get.keys.by.user.id=Failed to fetch user. ${app_error_code}

#
# Jive 6.0
#
jive60LoginFailed=Could not verify the Jive administrator login and password; please confirm that these are set correctly.
app.jive60.api.error.api.validation=Failed to validate Admin credentials. ${app_error_code}
app.jive60.api.error.auth=Error authenticating against Jive: ${app_error_code}
app.jive60.api.error.check_user_exists=Error while verifying if user exists on Jive: ${app_error_code}
app.jive60.api.error.create_user=Error while creating Jive user: ${app_error_code}
app.jive60.api.error.deactivate_user=Error while deactivating user: ${app_error_code}
app.jive60.api.error.reactivate_user=Error while reactivating user: ${app_error_code}
app.jive60.api.error.import_user_profile=Error while trying to import Jive user profile for user: ${app_error_code}
app.jive60.api.error.push_profile_update=Error while trying to push Jive profile update for user: ${app_error_code}
app.jive60.api.error.push_password_update=Error pushing Jive password for user: ${app_error_code}
app.jive60.api.error.upsert_group=Error while creating Jive security user group: ${app_error_code}
app.jive60.api.error.upsert_group_duplicate=Jive user group already exists. ${app_error_code}
app.jive60.api.error.delete_group=Error while deleting Jive security user group: ${app_error_code}
app.jive60.api.error.update_group_membership=Error while update Jive security user group membership for group: ${app_error_code}
app.jive60.api.error.download_users=Error while downloading all users from Jive: ${app_error_code}
app.jive60.api.error.generic=Jive API error: ${app_error_code}

#
# Jive 4.5
#
jive45LoginFailed=Could not verify the Jive administrator login and password; please confirm that these are set correctly.
app.jive45.api.error.api.validation=Failed to validate Admin credentials. ${app_error_code}
app.jive45.api.error.auth=Error authenticating against Jive: ${app_error_code}
app.jive45.api.error.check_user_exists=Error while verifying if user exists on Jive: ${app_error_code}
app.jive45.api.error.create_user=Error while creating Jive user: ${app_error_code}
app.jive45.api.error.deactivate_user=Error while deactivating user: ${app_error_code}
app.jive45.api.error.reactivate_user=Error while reactivating user: ${app_error_code}
app.jive45.api.error.import_user_profile=Error while trying to import Jive user profile for user: ${app_error_code}
app.jive45.api.error.push_profile_update=Error while trying to push Jive profile update for user: ${app_error_code}
app.jive45.api.error.push_password_update=Error pushing Jive password for user: ${app_error_code}
app.jive45.api.error.upsert_group=Error while creating Jive security user group: ${app_error_code}
app.jive45.api.error.upsert_group_duplicate=Jive user group already exists. ${app_error_code}
app.jive45.api.error.delete_group=Error while deleting Jive security user group: ${app_error_code}
app.jive45.api.error.update_group_membership=Error while update Jive security user group membership for group: ${app_error_code}
app.jive45.api.error.download_users=Error while downloading all users from Jive: ${app_error_code}
app.jive45.api.error.generic=Jive API error: ${app_error_code}

#
# Evernote Business
#
evernoteBusinessVerifyFailed=Could not connect to Evernote Business API, please check your authentication Token
app.evernote_business.api.error.validation=Unable to validate Evernote API configuration. ${app_error_code}
app.evernote_business.api.error.deactivation=Unable to deactivate Evernote user. ${app_error_code}
app.evernote_business.api.error.create.user=Unable to create Evernote user. ${app_error_code}
app.evernote_business.api.error.create.user.limit.reached=Unable to create Evernote user. You have reached your maximum number of users. ${app_error_code}

#
# Generic app
#
appLoginFailed=Cannot connect. Please ensure all details are set correctly.
verificationFailed=Verification failed: ${app_error_code}
app.api.error.api.validation=Failed to validate Admin credentials: ${app_error_code}
app.api.error.auth=Error authenticating: ${app_error_code}
app.api.error.oauth.get.token=Error while retrieving OAuth token: ${app_error_code}
app.api.error.oauth.refresh.token=Error while refreshing OAuth token: ${app_error_code}
app.api.error.user.not_found=User ${app_username} was not found in ${app_name}
app.api.error.group.not_found=Group ${group_name} was not found in ${app_name}
app.api.error.user.more_than_one_with_same_id=More than one user was found for ID: ${app_error_code}
app.api.error.group.more_than_one_with_same_id=More than one group was found for ID: ${app_error_code}
app.api.error.check_user_exists=Error while verifying if user exists: ${app_error_code}
app.api.error.create_user=Error while creating user: ${app_error_code}
app.api.error.deactivate_user=Error while deactivating user: ${app_error_code}
app.api.error.reactivate_user=Error while reactivating user: ${app_error_code}
app.api.error.import_user_profile=Error while trying to import user profile: ${app_error_code}
app.api.error.push_profile_update=Error while trying to push profile update: ${app_error_code}
app.api.error.push_password_update=Error pushing password: ${app_error_code}
app.api.error.upsert_group=Error while creating user group: ${app_error_code}
app.api.error.group_name_long_length=Group name is too long: ${app_error_code}
app.api.error.upsert_group_duplicate=User group already exists: ${app_error_code}
app.api.error.delete_group=Error while deleting user group: ${app_error_code}
app.api.error.update_group_membership=Error while updating user group membership for group: ${app_error_code}
app.api.error.add_group_membership=Error while adding user(s) to group: ${app_error_code}
app.api.error.remove_group_membership=Error while removing user(s) from group: ${app_error_code}
app.api.error.download_users=Error while downloading all users: ${app_error_code}
app.api.error.download_custom_objects=Error while downloading custom objects: ${app_error_code}
app.api.error.get_group_by_id=Error while trying to find an individual group by id: ${app_error_code}
app.api.error.download_groups=Error while downloading all groups: ${app_error_code}
app.api.error.download_memberships=Error while downloading users for group: ${app_error_code}
app.api.error.generic=API error: ${app_error_code}
app.api.error.rate.limit.exceeded=API rate limit exceeded. ${app_error_code}

#
# Syncplicity
#
syncplicityLoginFailed=Verification failed: ${app_error_code}

#
# Bloomfire
#
app.bloomfire.api.error.login.failed=Could not verify the Bloomfire administrator login and password; please confirm that these are set correctly.
app.bloomfire.api.error.api.validation=Failed to validate Admin credentials. {0}
app.bloomfire.api.error.check_user_exists=Error while verifying if user {0} exists in Bloomfire: {1}
app.bloomfire.api.error.download_users=Error while downloading all users from Bloomfire: {0}
app.bloomfire.api.error.generic=Bloomfire API error: {0}

#
# CornerStone
#
app.cornerstone.api.error.api.validation=Failed to validate the admin credentials against CornerStone On Demand
app.cornerstone.api.error.auth=Error authenticating against CornerStone On Demand
app.cornerstone.api.error.init=Failed to init CornerStone WebServices API
app.cornerstone.api.error.api.check_user_exists=Failed to verify if user exists on CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.password_push=Failed to push the password to CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.create_user=Failed to create user in CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.push_profile=Failed to update profile in CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.import_profile=Failed to import profile from CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.reactivate_user=Failed to reactivate user in CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.api.deactivate_user=Failed to deactivate user in CornerStone On Demand: ${app_error_code}
app.cornerstone.api.error.auth.unknown.host=Failed to connect to CornerStone On Demand. Please make sure that the CornerStone Organization Name has been entered correctly while configuring the General Settings

#
# ExactTarget
#
app.exacttarget.api.error.check_user_exists=Error while verifying if user exists on ExactTarget. ${app_error_code}
app.exacttarget.api.error.create_user=Error while creating ExactTarget user. ${app_error_code}
app.exacttarget.api.error.deactivate_user=Error while deactivatinguser in ExactTarget. ${app_error_code}
app.exacttarget.api.error.reactivate_user=Error while reactivating user in ExactTarget. ${app_error_code}
app.exacttarget.api.error.import_user_profile=Error while trying to import ExactTarget user profile. ${app_error_code}
app.exacttarget.api.error.push_profile_update=Error while trying to push ExactTarget profile update. ${app_error_code}
app.exacttarget.api.error.push_password_update=Error while trying to push ExactTarget password update. ${app_error_code}
app.exacttarget.api.error.download_users=Error while downloading all users from ExactTarget. ${app_error_code}
app.exacttarget.api.error.init=Error while client initialization. ${app_error_code}
app.exacttarget.api.error.generic=ExactTarget API error: ${app_error_code}

# Bloomfire
#
app.bloomfire.sso.error.user_not_extracted=Failed to extract user from SignOnRequest
app.bloomfire.sso.error.api_key_empty=API Key is required for SignOn request

# Appature
#
app.appature.sso.error.allowed_accounts.empty=Allowed accounts regex is required
app.appature.sso.error.groups.empty=Groups regex is required
app.appature.sso.error.allowed_accounts.invalid_regex=Allowed accounts regex is malformed
app.appature.sso.error.groups.invalid_regex=Groups regex is malformed

#
# Benetrac
#
app.benetrac.sso.error.site_id.empty=SiteID is required
app.benetrac.sso.error.partner_id.empty=PartnerID is required

#
# Connector Agent
#
agents.connector_agent.agent_reconnected=Agent ${agent_id} (${agent_name}) reconnected to Okta
agents.connector_agent.agent_disconnected=Agent ${agent_id} (${agent_name}) stopped connecting to Okta
agents.connector_agent.agent_deactivated=Agent ${agent_id} (${agent_name}) deactivated
agents.connector_agent.agent_reactivated=Agent ${agent_id} (${agent_name}) reactivated
agents.connector_agent.agent_deleted=Agent ${agent_id} (${agent_name}) deleted
agents.connector_agent.agent_reactivate_failed_missing_token=Cannot reactivate the agent ${agent_id} (${agent_name}) because the token has been removed. You must delete and re-install the agent.

#
# MOVEit DMZ
#
moveit_dmz.error.too.long.username.or.email=MOVEit DMZ username or email null or too long. Username and email: ${app_error_code}

app.ldap.password.reset.timeout=LDAP agent failed to reset password due to timeout.
app.ldap.password.reset.succeeded=Password reset succeeded.
app.ldap.password.reset.failed=Password reset failed.
app.ldap.password.reset.systemic.error=LDAP agent failed to reset password due to systemic error.
app.ldap.password.reset.constraint.error=LDAP agent failed to reset password because of password policy violation.
app.ldap.password.reset.invalid.old.password=LDAP agent failed to reset password because old password is invalid.
app.ldap.password_reset.old_new_passwords_equal=Failed to reset password because old and new password are equal.
app.ldap.password_reset.old_password_empty=Failed to reset password because old password is empty.
app.ldap.password_reset.new_password_empty=Failed to reset password because new password is empty.
app.ldap.password_reset.new_confirm_password_empty=Failed to reset password because repeated password is empty.
app.ldap.password_reset.passwords_do_not_match=Failed to reset password because passwords are not match.
app.ldap.password_reset.attribs_not_set=LDAP agent failed to reset password because password attribute is not set.
app.ldap.password_reset.restriction.error=LDAP agent failed to reset password because of restriction error.
app.ldap.password.change.timeout=Unable to change your password at this time. Please try again or contact your administrator.
app.ldap.password.change.systemic.error=Unable to change your password at this time.  Please try again or contact your administrator.
app.ldap.password.change.succeeded=Password reset succeeded.

permission_reporting.disabled=The OPs team has disabled the permission reporting service with JMX.

## Samanage
app.samanage.api.error.login.failed=Could not verify the SAManage administrator login and password; please confirm that these are set correctly.
app.samanage.api.error.long_group_name=Group name is too long (max length is 50 chars): ${app_error_code}

#
# Egnyte
#
app.egnyte.username.validation.failure=${app_error_code}. Please make sure that the Username matches Egnyte user naming convention
app.egnyte.auth.type.validation.failure=Please make sure that you selected correct Authentication Type for user ${app_error_code}
app.egnyte.rate.limiting.exceeded=Rate limit exceeded for Egnyte. {app_error_code}


## DUO
core.user_auth.duo.disabled_lockout=User failed to login because their Duo Security account is disabled or locked out
core.user_auth.duo.duo_down=User failed to login because the system was unable to contact the Duo API to validate their factor
core.user_auth.duo.invalid_integration=User failed to login because your Duo integration configuration is no longer valid.
core.user_auth.duo.enroll_incomplete=User is unable to self-enroll with Duo Security because their account has a previous registration that was not complete
core.user_auth.duo.no_self_enroll_no_devices=User failed to login because the user is not allowed to self-enroll and does not have any registered devices

#
# Roambi
#
roambi.api.error.deactivate_user.confirmation=Error while activating user: confirmation failed
roambi.api.error.reactivate_user.confirmation=Error while deactivating user: confirmation failed
roambi.api.error.auth.unexpected.response=Unexpected authentication response. HTTP status: ${app_error_code}
roambi.api.error.auth.empty.code=Authentication failure: received 'code' parameter is empty
roambi.api.error.auth.empty.account.response=Authentication failure: Failed to get account info - response is empty

#
# Litmos
#
app.litmos.group.push.group_name_too_long=The length of the name of your group is {instance_id}, but Litmos allows only {app_error_code}

# Smartsheet
#
smartsheet.rate.limit.exceeded=Rate limit exceeded for Smartsheet. ${app_error_code}

# GitHub
github.api.error.user_not_found=User ${app_username} does not exist in GitHub. Please check username or create user manually
github.api.error.rate_limit.exceeded=Rate limit exceeded for GitHub instance ${instance_id}
github.api.error.rate_limit.reset_date=Unable to get rate limit reset date [${app_error_code}] from Response for GitHub instance ${instance_id}
github.api.error.rate_limit.remaining=Unable to get rate limit remaining queries [${app_error_code}] from Response for GitHub instance ${instance_id}

#
# DocuSign
#
app.docusign.api.error.no.accounts=Provided user is not member of any account
app.docusign.api.error.not.account.member=Provided user is not member of account ${app_error_code}
app.docusign.api.error.update.permission.profile=Failed to update user permission profile. ${app_error_code}
app.docusign.api.error.import.permission.profile=Failed to import user permission profile. ${app_error_code}
app.docusign.api.error.update.inactive.user=Failed to update user details - user is not active. ${app_error_code}
app.docusign.api.error.import.inactive.user=Failed to get user details - user is not active. ${app_error_code}

#
# Huddle
#
huddle.company_id.validation.failure=Company Id not specified.
huddle.rate.limit.exceeded=You have exceeded rate limit for your client ID. Retrying after ${app_error_code}

#
# PagerDuty
#
app.pagerduty.api.auth.error.invalid.admin.username=Incorrect admin username: ${app_error_code}
app.pagerduty.api.auth.error.invalid.admin.role=User provided is not admin or owner. Provided user role is ${app_error_code}
app.pagerduty.api.auth.error.invalid.api.key=API key provided is invalid
app.pagerduty.api.push.profile.update.unexpected.status=Unexpected status response while updating user: ${app_error_code}. 200 is expected.
app.pagerduty.api.deactivate.user.unexpected.status=Unexpected status response while deleting user: ${app_error_code}. 204 is expected.

#
# Clarizen
#
app.clarizen.api.error.no_admin_rights=Provided credentials does not contain administrator permissions
app.clarizen.api.error.rate_limit.exceeded=Rate limit exceeded for Clarizen
app.clarizen.api.error.entity.not_found=Requested Clarizen Entity was not found: ${app_error_code}
app.clarizen.api.error.update_group=Unable to update Clarizen group: ${app_error_code}

#
# CrashPlan Pro
#
app.crashplanpro.api.invalid_set_of_roles=Current API account does not have required roles to do API calls. It should have one of these roles: ${app_error_code}
app.crashplanpro.api.auth.invalid_login_url=Invalid login URL specified
app.crashplanpro.api.rest.unexpected_response_status=${app_error_code}
app.crashplanpro.api.user_not_found=User cannot be found in CrashPlan. ${app_error_code}
app.crashplanpro.api.user_has_invalid_fields=User has invalid fields, please verify and try again. ${app_error_code}
app.crashplanpro.api.ambiguous_search_results_by_user=Ambiguous search results. There are more than one user with same username was found. Username: ${app_error_code}

#
# GoodData
#
gooddata.api.error.no.admin.rights=User is not a domain admin.
gooddata.api.error.project.access.forbidden=Cannot access the project with admin credentials: ${app_error_code}
gooddata.api.error.project.assignment.failed=Failed to assign user to the project ${app_error_code}.
gooddata.api.error.project.not.found=Project ${app_error_code} not found.
gooddata.api.error.incorrect.roles.count=Incorrect roles count for user ${app_error_code}: only zero or one role per project should be selected
